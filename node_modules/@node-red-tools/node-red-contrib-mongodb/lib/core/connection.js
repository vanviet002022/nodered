"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongodb_1 = require("mongodb");
var collection_1 = require("./collection");
var Connection = /** @class */ (function () {
    function Connection(client, db, collections) {
        if (collections === void 0) { collections = []; }
        this.__client = client;
        this.__db = db;
        this.__collections = collections.reduce(function (res, c) {
            var out = res;
            out[c.name] = c;
            return out;
        }, {});
    }
    Connection.open = function (uri, collections, options) {
        return __awaiter(this, void 0, void 0, function () {
            var client, db, existingCollections, hashMap, c;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mongodb_1.MongoClient.connect(uri, Object.assign({
                            useUnifiedTopology: true,
                        }, options))];
                    case 1:
                        client = _a.sent();
                        db = client.db();
                        return [4 /*yield*/, db.collections()];
                    case 2:
                        existingCollections = _a.sent();
                        hashMap = existingCollections.reduce(function (res, c) {
                            var out = res;
                            out[c.collectionName] = c;
                            return res;
                        }, {});
                        return [4 /*yield*/, Promise.all(collections.map(function (i) {
                                var existing = hashMap[i.name];
                                if (existing) {
                                    return new collection_1.Collection(existing);
                                }
                                if (!i.autoCreate) {
                                    return Promise.reject(new Error("Collection \"" + i.name + "\" does not exists in \"" + db.databaseName + "\" database"));
                                }
                                return collection_1.Collection.create(db, i);
                            }))];
                    case 3:
                        c = _a.sent();
                        return [2 /*return*/, new Connection(client, db, c)];
                }
            });
        });
    };
    Connection.prototype.isConnected = function () {
        this.__assertIsOpen();
        return this.__client.isConnected();
    };
    Connection.prototype.db = function () {
        this.__assertIsOpen();
        return this.__db;
    };
    Connection.prototype.collection = function (name) {
        this.__assertIsOpen();
        var collection = this.__collections[name];
        if (!collection) {
            throw new Error("Collection \"" + name + "\" does not exist in \"" + this.__db.databaseName + "\" database.");
        }
        return collection;
    };
    Connection.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.__assertIsOpen();
                        return [4 /*yield*/, this.__client.close()];
                    case 1:
                        _a.sent();
                        delete this.__client;
                        delete this.__db;
                        delete this.__collections;
                        return [2 /*return*/];
                }
            });
        });
    };
    Connection.prototype.__assertIsOpen = function () {
        if (!this.__client) {
            throw new Error('Connection is closed');
        }
    };
    return Connection;
}());
exports.Connection = Connection;
